Estudos de POO em Python

Metodos de instancia


from datetime import datetime
class Pessoa:
    ano_atual = int(datetime.strftime(datetime.now(), '%Y'))
    
    def __init__(self, nome, idade, comendo=False, falando=False):
        self.nome = nome
        self.idade = idade
        self.comendo = comendo
        self.falando = falando
        
   
            
    def falar(self, assunto):
        if self.comendo:
            print(f'{self.nome} nao pode falar comendo')
            return
        
        if self.falando:
            print(f'{self.nome} ja esta falando sobre {assunto} ')
            return
            
        
        print(f'{self.nome} esta falando sobre {assunto}')
        self.falando = True
        
        
    def paraDEcomer(self):
        if not self.comendo:
            print(f'{self.comendo} nao esta comendo')
            return
            
        print(f'{self.nome} Parou de comer')
        self.comendo = False
        
        
         
    def comer(self, alimento):
        if self.comendo:
            print('Luiz ja esta comendo.')
            return
        
        if self.falando:
            print(f'{self.nome} nao pode comer falando.')
            return
        
        
        print(f'{self.nome} esta comendo {alimento}.')
        self.comendo = True
        
        
    def parar_falar(self):
        if not self.falando:
            print(f'{self.nome} nao esta falando.')
            return
        
        print(f'{self.nome} parou de falar')
        self.falando = False
        
        
    def ano_nascimento(self):
        return self.ano_atual - self.idade
        
       
        
        
p1 = Pessoa('Joao', 19)
p2 = Pessoa('Maria Clara', 17)

print(p1.ano_nascimento())
print(p2.ano_nascimento())

        



Metodos de classes em Python


# Metodos de Classes
from datetime import datetime
class Pessoa:
    ano_atual = int(datetime.strftime(datetime.now(), '%Y'))

#As funcoes que estiverem dentro de classe sao metodos de instância 
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

#A chamada do self é para referir a instância
#OBS: pode ser qualquer nome

    def get_ano_nascimento(self):
        print(self.ano_atual - self.idade)

#metodos de classe
    @classmethod
    def por_ano_nascimento(cls, nome, ano_nascimento):
        #Váriavel de escopo local
        idade = cls.ano_atual - ano_nascimento
        return cls(nome, idade)

#A chamada cls é para referir a classe. OBS: pode ser qualquer nome

p1 = Pessoa.por_ano_nascimento('Luiz', 2000)
print(p1.idade)
p1.get_ano_nascimento( )



Metodos Estaticos
Como se fosse uma funcao normal, mas nao recebe (self) nem (cls) . 
Pode receber parametros ou nao

 @staticmethod
    def gera_id():
        return randint(1, 10)
